workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

stages:
  - environment
  - version
  - test
  - deploy

before_script:
  - aea_projects='/projects'
  - aea_compute_path="${aea_projects}/aea_compute"
  - aea_conda_channel="${aea_compute_path}/aea-conda"
  - aea_modulefiles=${aea_compute_path}/modulefiles
  - module use ${aea_modulefiles}
  - module use ${PWD}/modulefiles
  # Prefer the CI environment and fall back to AEA environment(s)
  - project_environment='micromorphic_linear_elasticity-env'
  - environment_choices="${project_environment} aea-beta aea-release"
  - for env in ${environment_choices}; do if [[ -d "${aea_compute_path}/${env}" ]]; then environment=${env}; break; fi; done
  - echo ${environment}
  - module load ${environment}
  - conda info
  # Build the Conda environment if it's missing
  # TODO: kick off 'environment' job for missing environments instead of re-creating the environment build logic here
  # https://re-git.lanl.gov/kbrindley/waves/-/issues/8
  - environment_path="${aea_compute_path}/${project_environment}"
  - conda_options="--yes --channel ${aea_conda_channel} --channel conda-forge --override-channels"
  - |
      if [[ ! -d ${environment_path} ]]; then
          export ALL_PROXY="proxyout.lanl.gov:8080"
          export HTTP_PROXY="http://$ALL_PROXY"
          export HTTPS_PROXY=$HTTP_PROXY
          conda create --prefix ${environment_path} --file environment.txt ${conda_options};
          chmod -R 755 ${environment_path}
          unset ALL_PROXY
          unset HTTP_PROXY
          unset HTTPS_PROXY
      fi
  - if [[ ${project_environment} != ${environment} ]]; then module unload ${environment}; module load ${project_environment}; fi
  - conda_artifacts_directory='conda-bld'

environment:
  stage: environment
  variables:
    GIT_STRATEGY: clone
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "dev"
      changes:
        - "modulefiles/*"
        - "environment.txt"
  script:
    - export ALL_PROXY="proxyout.lanl.gov:8080"
    - export HTTP_PROXY="http://$ALL_PROXY"
    - export HTTPS_PROXY=$HTTP_PROXY
    # Re-build the Conda environment on changes to environment files
    - conda create --prefix ${environment_path} --file environment.txt ${conda_options}
    # Remove write permissions from group to avoid accidental environment changes
    - chmod -R 755 ${environment_path}
    # place the common modulefiles in an accessible location
    - cp ${PWD}/modulefiles/* ${aea_modulefiles}
  tags:
    # FIXME: troubleshoot sstbigbird/RHEL8 python interpretter mismatch
    # https://re-git.lanl.gov/aea/material-models/micromorphic_linear_elasticity/-/issues/9
    - sstelmo-shell-aea

microbump:
  stage: version
  variables:
    GIT_STRATEGY: clone
  script:
    # Build VERSION file from GetVersionFromGit.cmake without a full CMake configuration
    - ${cmake_program} -D PROJECT_NAME=cpp_stub -D VERSION_UPDATE_FROM_GIT=True -P src/cmake/GetVersionFromGitTag.cmake
    # GetVersionFromGit.cmake bumps micro/patch version. Retrieve next release from VERSION
    - production_version=$(cut -f 1 -d '*' VERSION)
    - developer_version=${production_version}+dev
    # Tag production commit and previous developer commit. Continue if already tagged.
    - git config user.name "${GITLAB_USER_NAME}"
    - git config user.email "${GITLAB_USER_EMAIL}"
    - git remote add oauth2-origin https://gitlab-ci-token:${GITLAB_ACCESS_TOKEN}@re-git.lanl.gov/${CI_PROJECT_PATH}.git
    - git tag -a ${production_version} -m "production release ${production_version}" || true
    - last_merge_hash=$(git log --pretty=format:"%H" --merges -n 2 | tail -n 1)  # Assume last merge was dev->main. Pick previous
    - git tag -a ${developer_version} -m "developer release ${developer_version}" ${last_merge_hash} || true
    - git push oauth2-origin --tags
  tags:
    - sstelmo-shell-aea
  only:
    - main

test_build:
  stage: test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  variables:
    GIT_STRATEGY: clone
  script:
    - workdir=${PWD}
    - mkdir build
    - cd build
    - ${cmake_program} .. -DCMAKE_BUILD_TYPE=Release
    - ${cmake_program} --build . --verbose
    - ctest --verbose --output-log results.txt
    - cd ${workdir}
  artifacts:
    when: always
    paths:
      - build/results.txt
  tags:
    - sstelmo-shell-aea

# It MUST be called pages
pages:
  stage: deploy
  variables:
    GIT_STRATEGY: clone
  script:
    - rm -rf public && mkdir -p public
    - cp docs/html/index.html public
    # Every documentation version must be re-built for *every* gitlab-pages job execution
    # Reference: https://gitlab.com/gitlab-org/gitlab/-/issues/33822
    - git fetch origin
    - git branch -a
    - documentation_branches="main dev"
    - |
        for ref in ${documentation_branches}; do
            git checkout $ref
            git reset --hard origin/$ref
            mkdir -p public/$ref/doxygen
            ./BUILD.sh
            cp -r build/docs/sphinx/html/* public/$ref
            cp -r build/docs/doxygen/html/* public/$ref/doxygen
        done
  artifacts:
    paths:
      # It MUST be called public
      - public
  tags:
    - sstelmo-shell-aea
  only:
    - main
    - dev
